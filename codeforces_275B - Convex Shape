#include <stdio.h>
#include <memory.h>

int find(int bount[][2],int left,int right,int n)
{
    int i;
    
    if(left>=0)
    {
        for (i=0;i<n;i++)
        {
            if (bount[i][0]>=0 && (right>bount[i][1] && left>bount[i][0]))
            {
                return 1;
            };
            if (bount[i][0]>=0 && (right<bount[i][1] && left<bount[i][0]))
            {
                return 1;
            };
        };
    };
    bount[n][0]=left;
    bount[n][1]=right;
    return 0;
};

int main()
{
    char map[50][51];
    int bount[50][2];
    int n,m,i,j,tag,ret,count;
    int left,right,leftbuf,rightbuf,leftalarm,rightalarm;
    
    while (scanf("%d%d",&n,&m)!=EOF)
    {
        leftbuf=rightbuf=-1;
        leftalarm=rightalarm=-1;
        tag=ret=0;
        count=0;
        for (i=0;i<n;i++)
        {
            left=right=-1;
            tag=0;
            scanf("%s",map[i]);
            if(ret==0)
            {
                for (j=0;j<m;j++)
                {
                    if (map[i][j]=='B')
                    {
                        count++;
                        if(tag==0 && left<0)
                        {
                            left=j;
                            tag++;
                        }else if(right>=0){
                            ret++;
                        };
                        if (j==m-1)
                        {
                            right=m-1;
                        };
                    }else
                    {
                        if (map[i][j-1]=='B')
                        {
                            right=j-1;
                        };
                    };
                };
                //printf("i=%d left=%d right=%d lebu=%d ribu=%d\n",i,left,right,leftbuf,rightbuf);
                if (rightbuf!=-1 && i>0 && left>=0)
                {
                    if (left>leftbuf)
                    {
                        leftalarm=0;
                    }else if(left<leftbuf && leftalarm==0)
                        ret++;
                    if (right<rightbuf)
                    {
                        rightalarm=0;
                    }else if(right>rightbuf && rightalarm==0)
                        ret++;
                    if((right!=-1 && right<leftbuf) ||(rightbuf!=-1 && left>rightbuf))
                        ret++;
                };
                if (find(bount,left,right,i)==1)
                {
                    ret++;
                }
                leftbuf=left;
                rightbuf=right;
            }
        };
        if (ret==0 && count>0)
        {
            printf("YES\n");
        }else
        {
            printf("NO\n");
        }
    }
    return 0;
}
